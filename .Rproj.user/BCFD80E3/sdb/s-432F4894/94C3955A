{
    "collab_server" : "",
    "contents" : "library(magrittr)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(dplyr)\n\ndata <- read.csv(\"data/jenkins_stats.csv\", stringsAsFactors=FALSE)\n\ntzabbrev <- vapply(\n  OlsonNames(),\n  function(x) c(\n    format(as.POSIXct(\"2000-01-01\",tz=x),\"%Z\"),\n    format(as.POSIXct(\"2000-07-01\",tz=x),\"%Z\")\n  ),\n  FUN.VALUE=character(2)\n)\n\ntmp <- data.frame(Olson=OlsonNames(), t(tzabbrev), stringsAsFactors=FALSE)\nfinal <- unique(data.frame(tmp[1], abbrev=unlist(tmp[-1])))\n\ndata <- data %>% \n  mutate(datetime = parse_date_time(Date, orders=\"md HMS y\", tz=final$Olson[match(tail(strsplit(Date, \" \")[[1]], n=2)[1],final$abbrev)]))\n\njenkins <- data\nsave(jenkins, file=\"jenkins.Rda\")\n\np1 <- ggplot() +\n  geom_line(data = data, aes(x = datetime, y = Busy.executors, color = \"busy\")) +\n  geom_line(data = data, aes(x = datetime, y = Idle.executors, color = \"idle\")) +\n  ggtitle(\"Executors\")\np1\n\nts <- data %>% \n  select(datetime, Busy.executors)\n\n# -- Step 2: Difference data to make data stationary on mean (remove trend) ----\n# 1st Differencing (d=1)\t Yt' = Yt - Yt-1 \nts.diff <- diff(ts$Busy.executors)\nqplot(1:length(ts.diff), y = ts.diff, ylab = 'Differentiated Executors', geom=\"line\")\n\n# -- Step 3: log transform data to make data stationary on variance ------------\n# Log of sales\t Yt_new = log10(Yt) \nts.log10 <- log10(ts$Busy.executors)\nqplot(1:length(ts.log10), y = ts.log10, ylab = 'Log (Executors)', geom=\"line\")\n\n# -- Step 4: Difference log transform data to make data stationary on both mean and variance\n# 1st Differencing (d=1) of log of sales\t Yt_new' = log10(Yt) - log10(Yt-1)\nts.difflog10 <- diff(log10(data$Busy.executors))\nqplot(1:length(ts.difflog10), y = ts.difflog10, ylab = 'Differentiated Log (Executors)', geom=\"line\")\n\nlibrary(xts)\nlibrary(zoo)\nlibrary(scales)\n\nt <- xts(ts$Busy.executors, ts$datetime)\n\nts.h <- ts(to.hourly(t)$t.High, frequency = 24)\nts.h\n\np2 <- ggplot() +\n  geom_line(data = as.zoo(ts.h), aes(x = index(ts.h), y = ts.h, color = \"busy\")) +\n  ggtitle(\"Executors\")\np2\n\nlibrary(forecast)\n\nARIMAfit <- auto.arima(ts.h, seasonal=TRUE)\nsummary(ARIMAfit)\narimaf <- forecast(ARIMAfit, h=3*24)\nautoplot(arimaf)\n\nTbatsfit <- tbats(ts.h)\nsummary(Tbatsfit)\ntbatsf <- forecast(Tbatsfit, h=24*3)\nautoplot(tbatsf)\n\npar(mfrow = c(1,2))\nacf(ts(ARIMAfit$residuals), main = 'ACF Residual')\npacf(ts(ARIMAfit$residuals), main = 'PACF Residual')\npar(mfrow = c(1,1))\n\n# Performance Metric\ntest <- tail(data, 3*24)\nlength(test)\nsum(test$Idle.executors - tbatsf$mean)\nplot(tbatsf$mean)\ntest$pred <- as.numeric(tbatsf$mean)\np3 <- ggplot() +\n  geom_line(data = test, aes(x = index(test), y = Idle.executors, color = \"idle\")) +\n  geom_line(data = test, aes(x = index(test), y = pred, color = \"busy\")) +\n  ggtitle(\"Executors\")\np3\ni <- which(test$Idle.executors > test$pred)\nsum(test[i,]$Idle.executors-test[i,]$pred)\n",
    "created" : 1490815476257.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "607054233",
    "id" : "94C3955A",
    "lastKnownWriteTime" : 1490820658,
    "last_content_update" : 1490820658,
    "path" : "~/Desktop/RocketScience/Jenkins/R/main.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}